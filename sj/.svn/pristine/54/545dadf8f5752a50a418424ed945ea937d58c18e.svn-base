package com.krm.dbaudit.web.risk.controller;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.github.pagehelper.PageInfo;
import com.google.common.collect.Maps;
import com.krm.dbaudit.common.excel.ExcelUtils;
import com.krm.dbaudit.common.utils.StringConvert;
import com.krm.dbaudit.web.model.model.AuditModel;
import com.krm.dbaudit.web.model.model.AuditType;
import com.krm.dbaudit.web.model.model.ModelProperty;
import com.krm.dbaudit.web.model.service.AuditModelService;
import com.krm.dbaudit.web.model.service.AuditTypeService;
import com.krm.dbaudit.web.model.service.ModelPropertyService;
import com.krm.dbaudit.web.risk.model.RiskModelBase;
import com.krm.dbaudit.web.risk.service.RiskDetectionService;
import com.krm.dbaudit.web.risk.util.TimeUtil;
import com.krm.dbaudit.web.sys.model.SysDict;
import com.krm.dbaudit.web.sys.model.SysOffice;
import com.krm.dbaudit.web.sys.service.SysDictService;
import com.krm.dbaudit.web.util.ListUtil;
import com.krm.dbaudit.web.util.ResponseUtils;
import com.krm.dbaudit.web.util.SysUserUtils;

/**
 * 风险监测
 * @author Parker
 *
 */
@Controller
@RequestMapping("risk/detection")
public class RiskDetectionController
{
	@Resource
	private RiskDetectionService riskDetectionService;
	
	@Resource
	private ModelPropertyService modelPropertyService;
	
	@Resource
	private SysDictService sysDictService;
	
	@Resource
	private AuditTypeService auditTypeService;
	
	/**
	 * 首页新增模型数量方法
	 * @param model
	 * @return
	 */
	@RequestMapping("control")
	public String toMenu(Model model) {
		model.addAttribute("lastMonthList", findAmount(1));
		model.addAttribute("yesterdayList", findAmount(0));
		return "risk/index";
	}
	
	public List<Map<String,Object>>  findAmount(Integer flag)
	{
		Map<String,Object> params = new HashMap<String, Object>();
		params.put("status", 8);
		List<Map<String,Object>> list = riskDetectionService.findAmount(flag, params);
		Integer total = 0;
		Map<String,Object> account = new HashMap<String, Object>();
		for (Iterator<Map<String, Object>> iterator = list.iterator(); iterator.hasNext();)
		{
			Map<String, Object> map = (Map<String, Object>) iterator.next();
			if(map.entrySet().size() <2)
			{
        		total =  Integer.parseInt(map.get("value").toString());
        		iterator.remove();
			}
		}
        account.put("total", total);
        list.add(account);
        return list;
	}
	/**
	 * 分页显示
	* @param params
	* @return
	 * @throws UnsupportedEncodingException 
	 */
	@RequestMapping(value="list", method=RequestMethod.POST)
	public void list(@RequestParam Map<String, Object> params,
			HttpServletResponse response) throws UnsupportedEncodingException
	{
		Map<String,Object> map = new HashMap<String, Object>();
		for (String key : params.keySet())		//处理中文乱码
		{
			String paramsTrans = new String(((String) params.get(key)).getBytes("ISO-8859-1"),"UTF-8");
			paramsTrans = java.net.URLDecoder.decode(paramsTrans, "UTF-8");
			map.put(key, paramsTrans);
		}
		if (params.containsKey("sortC"))		//加入排序参数
		{
			map.put("sortC", StringConvert.camelhumpToUnderline(params.get(
					"sortC").toString()));
		}
		map.put("status", 8);	//默认已发布状态
		//搜索树自动查询结果，根据条线和机构两个条件
		String buzLine = null;
		String organId = null;
		if(map.containsKey("buzLine")){
			buzLine = map.get("buzLine").toString();
		}if(map.containsKey("organId")){
			organId = map.get("organId").toString();
		}
		if(buzLine != null && buzLine.length() != 0){
			String buzLines [] = buzLine.split(",");
			map.put("buzLine", buzLines);
		}
		if(organId != null && organId.length() != 0){
			String organIds [] = organId.split(",");
			map.put("organId", organIds);
		}
		PageInfo<RiskModelBase> page = riskDetectionService.findPageInfo(map);
		ResponseUtils.renderJson(response, page);
	}
	/**
	 * 审计专项分页显示
	 * @param params
	 * @return
	 * @throws UnsupportedEncodingException 
	 */
	@RequestMapping(value="list1", method=RequestMethod.POST)
	public void list1(@RequestParam Map<String, Object> params,
			HttpServletResponse response) throws UnsupportedEncodingException
			{
		Map<String,Object> map = new HashMap<String, Object>();
		for (String key : params.keySet())		//处理中文乱码
		{
			String paramsTrans = new String(((String) params.get(key)).getBytes("ISO-8859-1"),"UTF-8");
			paramsTrans = java.net.URLDecoder.decode(paramsTrans, "UTF-8");
			map.put(key, paramsTrans);
		}
		if (params.containsKey("sortC"))		//加入排序参数
		{
			map.put("sortC", StringConvert.camelhumpToUnderline(params.get(
					"sortC").toString()));
		}
		map.put("status", 8);	//默认已发布状态
		//搜索树自动查询结果，根据条线和机构两个条件
		String type = null;
		String organId = null;
		if(map.containsKey("type")){
			type = map.get("type").toString();
		}if(map.containsKey("organId")){
			organId = map.get("organId").toString();
		}
		if(type != null && type.length() != 0){
			String types [] = type.split(",");
			map.put("type", types);
		}
		if(organId != null && organId.length() != 0){
			String organIds [] = organId.split(",");
			map.put("organId", organIds);
		}
		PageInfo<RiskModelBase> page = riskDetectionService.findPageInfoByAudit(map);
		ResponseUtils.renderJson(response, page);
			}
	
	/**
	 * 业务条线树
	 * @param response
	 */
	@RequestMapping(value="buzLine",method=RequestMethod.GET)
	public void findBuzLine(HttpServletResponse response,Long property)
	{
		List<SysDict> list = new ArrayList<SysDict>();
		SysDict sd = null;
		
		List<ModelProperty> mps = modelPropertyService.findAllProperty();
		if(property == null)			//首页树一级菜单不查询，不需要属性值
		{
			if (!mps.isEmpty())
			{
				for (ModelProperty mp : mps)
				{
					sd = new SysDict();
					sd.setId(mp.getId());
					sd.set("name", mp.getName());
					sd.set("parentId", 0L);
					sd.set("haveLine",  mp.getHaveLine());
					sd.setValue("0");
					sd.setType("buzline");
					list.add(sd);
					if(mp.getHaveLine() == 1)
					{
						List<SysDict> dicts = (List<SysDict>) sysDictService
								.findAllMultimap().get("model_buz_line");
						for (SysDict dic : dicts)
						{
							sd = new SysDict();
							sd.setId(dic.getId());
							sd.set("name",dic.getLabel());
							sd.set("parentId", mp.getId());
							sd.setValue(dic.getValue());
							sd.setType("buzline");
							list.add(sd);
						}
					}
				}
			}
				//非首页一级菜单和首页二级菜单树
		}else{									
			if (!mps.isEmpty())
			{
				for (ModelProperty mp : mps)
				{
					if(mp.getId() == property)
					{
						sd = new SysDict();
						sd.setId(mp.getId());
						sd.set("name", mp.getName());
						sd.set("parentId", 0L);
						sd.set("haveLine",  mp.getHaveLine());
						sd.setValue("0");
						sd.setType("buzline");
						list.add(sd);
						if(mp.getHaveLine() == 1)
						{
							List<SysDict> dicts = (List<SysDict>) sysDictService
									.findAllMultimap().get("model_buz_line");
							for (SysDict dic : dicts)
							{
								sd = new SysDict();
								sd.setId(dic.getId());
								sd.set("name",dic.getLabel());
								sd.set("parentId", mp.getId());
								sd.setValue(dic.getValue());
								sd.setType("buzline");
								list.add(sd);
							}
						}
					}
				}
			}
		}

		ResponseUtils.renderJson(response, list);
	}
	
	
	/**
	 * 专项树
	 * @param property
	 * @param line
	 * @return
	 */
	@RequestMapping(value = "auditTree")
	public @ResponseBody List<AuditType> tree(Long property,String line) {
		List<AuditType> auditTypeList = auditTypeService.findAllAuditType();
		List<AuditModel> auditModelList = riskDetectionService.findAllAuditModel();
		for (AuditModel auditModel : auditModelList)
		{
			AuditType auditType = new AuditType();
			auditType.setId(auditModel.getId());
			auditType.setParentId(auditModel.getType());
			auditType.set("modelId", auditModel.getModel());
			auditType.set("type", auditModel.getType());
			auditType.set("name", auditModel.get("name"));
			auditTypeList.add(auditType);
		}
		return auditTypeList;
		
	}
	
	
	/**
	 * 机构树
	 * @return
	 */
	@RequestMapping(value="tree",method = RequestMethod.POST)
	public @ResponseBody List<SysOffice> getOfficeTreeList(@ModelAttribute SysOffice sysOffice){
		List<SysOffice> list = SysUserUtils.getUserOffice();
		return SysUserUtils.getUserOffice();
	}
	
	
	/**
	 * 导出execl 
	 */
	@RequestMapping(value = "export",method = RequestMethod.POST)
	public void exportFile(@RequestParam Map<String, Object> params,
			HttpServletResponse response){
		params.put("status", 8);	//默认已发布状态
		List<RiskModelBase> list = riskDetectionService.findModelList(params);
		
		Map<String, String> titleMap = Maps.newLinkedHashMap();
		titleMap.put("﻿模型编号","id");
		titleMap.put("模型名称","name");
		titleMap.put("业务属性","propertyname");
		titleMap.put("业务条线","buzlinename");
		titleMap.put("专题","subjectname");
		titleMap.put("风险级别","risklevelname");
		titleMap.put("状态","statusname");
		titleMap.put("数据源","dbSrc");
		titleMap.put("跑批时间","runTime");
		titleMap.put("频度","interval");
		titleMap.put("跑批方式","runWay");
		titleMap.put("结果表名","tname");
		titleMap.put("主键字段","cKey");
		titleMap.put("机构字段","cOrg");
		titleMap.put("客户号字段","cCustomer");
		titleMap.put("模型描述","description");
		titleMap.put("创建人","createBy");
		titleMap.put("创建时间","createDate");
		titleMap.put("修改人","updateBy");
		titleMap.put("修改时间","updateDate");
		titleMap.put("删除标识","delFlag");
		titleMap.put("最后跑批时间","lastRunDate");
		titleMap.put("最后跑批记录数","lastRunCount");
		titleMap.put("最后跑批状态","lastRunStatus");
		
		try {
			//流的方式直接下载
			ExcelUtils.exportExcel(response, "模型.xls", list, titleMap);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 首页新增模型数量导出
	 * @param params
	 * @param response
	 */
	@RequestMapping(value="exportData1",method=RequestMethod.POST)
	public void exportData1(@RequestParam Map<String, Object> params,HttpServletResponse response)
	{
		Integer flag = Integer.parseInt(params.get("flag").toString());
		List<Map<String,Object>> list = findAmount(flag);
		Map<String, String> titleMap = Maps.newLinkedHashMap();
		titleMap.put("模型名称", "name");
		titleMap.put("新增数量", "value");
		if(flag == 1){
			try {
				//流的方式直接下载
				ExcelUtils.exportExcel(response, "上月模型新增数量.xls", list, titleMap);
				
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		if(flag == 0){
			try {
				//流的方式直接下载
				ExcelUtils.exportExcel(response, "昨日模型新增数量.xls", list, titleMap);
				
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	/**
	 * 首页新增数据导出
	 * @param params
	 * @param response
	 */
	@RequestMapping(value="exportData2",method=RequestMethod.POST)
	public void exportData2(@RequestParam Map<String, Object> params,HttpServletResponse response)
	{
		List<Map<String,Object>> list = statusTool(params);
		Map<String, String> titleMap = Maps.newLinkedHashMap();
		titleMap.put("统计项", "key");
		titleMap.put("上月", "value1");
		titleMap.put("昨日", "value2");
		try {
			//流的方式直接下载
			ExcelUtils.exportExcel(response, "模型数据新增表.xls", list, titleMap);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 动态查询数据记录统计
	 * @param params
	 * @param response
	 * @throws UnsupportedEncodingException
	 */
	@RequestMapping(value="status", method=RequestMethod.POST)
	public @ResponseBody void findDataByStatus(@RequestParam Map<String, Object> params,
			HttpServletResponse response) throws UnsupportedEncodingException{
		ResponseUtils.renderJson(response, statusTool(params));
	}
	
	/**
	 * 处理新增数据方法
	 * @param params
	 * @return
	 */
	public List<Map<String,Object>> statusTool(@RequestParam Map<String, Object> params){
		Integer property = Integer.parseInt(params.get("property").toString());
		Integer buzLine = null;
		Integer str = Integer.parseInt(params.get("buzLine").toString());	//将二级菜单的条线设为null
		if(str == 0){
			buzLine = null;
		}else{
			buzLine = str;
		}
		
		Map<String,Object> newParams = new HashMap<String, Object>();	//重新封装参数map
		newParams.put("property", property);
		newParams.put("buzLine", buzLine);
		
		List<Map<String,Object>> list = riskDetectionService.findLastMonthByStatus(newParams); //上月数据
		List<Map<String,Object>> list1 = riskDetectionService.findYesterdayByStatus(newParams); //昨天数据
		list.addAll(list1);	//合并数据
		list = ListUtil.mergeList(list); //去除重复元素
		Collections.sort(list, new Comparator<Map<String,Object>>(){		//合并后list进行再排序
			public int compare(Map<String, Object> o1, Map<String, Object> o2){
				Integer sort1 = Integer.parseInt(o1.get("sort").toString());
				Integer sort2 = Integer.parseInt(o2.get("sort").toString());
				return sort1 - sort2;
			}
		});
		return list;
	}
	
	/**
	 * 未知功能。。。
	 * @param params
	 * @param response
	 * @throws UnsupportedEncodingException
	 */
	@RequestMapping(value="total", method=RequestMethod.POST)
	public @ResponseBody void findTotal(@RequestParam Map<String, Object> params,
			HttpServletResponse response) throws UnsupportedEncodingException{
		Integer property = Integer.parseInt(params.get("property").toString());
		Integer buzLine = null;
		Integer str = Integer.parseInt(params.get("buzLine").toString());	//将二级菜单的条线设为null
		if(str == 0){
			buzLine = null;
		}else{
			buzLine = str;
		}
		
		Map<String,Object> newParams = new HashMap<String, Object>();
		newParams.put("property", property);
		newParams.put("buzLine", buzLine);
		Integer total = riskDetectionService.findTotal(newParams);	//查询总数
		Map<String,Integer> map = new HashMap<String, Integer>();
		map.put("total", total);
		ResponseUtils.renderJson(response, map);
	}
	
	/**
	 * 饼图查询模型新增数量
	 * @param flag
	 * @param response
	 */
	@RequestMapping(value="countByPie", method=RequestMethod.POST)
	public void  countByPie(@RequestParam Integer flag, HttpServletResponse response)
	{
		Map<String,Object> params = new HashMap<String, Object>();
		List<Map<String,Object>> list = riskDetectionService.findAmount(flag,params);
		for (Iterator<Map<String, Object>> iterator = list.iterator(); iterator.hasNext();)
		{
			Map<String, Object> map1 = (Map<String, Object>) iterator.next();
			if(map1.entrySet().size() <2)
			{
        		iterator.remove();
			}
		}
        ResponseUtils.renderJson(response, list);
	}
	
	/**
	 * 柱状图查询新增模型数量
	 * @param response
	 */
	@RequestMapping(value="countByBar", method=RequestMethod.POST)
	public void  countByBar(HttpServletResponse response)
	{
		Map<String,Object> params = new HashMap<String, Object>();
		List<Map<String,Object>> list = riskDetectionService.countByBar(params);
		list = ListUtil.mergeList(list);
		ResponseUtils.renderJson(response, list);
	}
	
	/**
	 * 柱状图机构新增模型排行榜
	 * @param params
	 * @param response
	 */
	@RequestMapping(value="findByOrgan", method=RequestMethod.POST)
	public void  findByOrgan(@RequestParam Map<String, Object> params, HttpServletResponse response)
	{
		Integer property = Integer.parseInt(params.get("property").toString());
		Integer flag = Integer.parseInt(params.get("flag").toString());
		Integer buzLine = null;
		Integer str = Integer.parseInt(params.get("buzLine").toString());	//将二级菜单的条线设为null
		if(str == 0){
			buzLine = null;
		}else{
			buzLine = str;
		}
		
		Map<String,Object> newParams = new HashMap<String, Object>();	//重新封装参数map
		newParams.put("property", property);
		newParams.put("buzLine", buzLine);
		
		List<Map<String,Object>> list =  new ArrayList<Map<String,Object>>();
		List<Map<String,Object>> list1 = new ArrayList<Map<String,Object>>();
		if(flag == 1){
			list1 = riskDetectionService.findLastMonthByOrgan(newParams);
		}else{
			list1 = riskDetectionService.findYesterdayByOrgan(newParams);
		}
		Collections.sort(list1, new Comparator<Map<String,Object>>(){		//合并后list进行再排序
			public int compare(Map<String, Object> o1, Map<String, Object> o2){
				Integer count1 = Integer.parseInt(o1.get("count").toString());
				Integer count2 = Integer.parseInt(o2.get("count").toString());
				return count2 - count1;
			}
		});
		if(list1.size() >= 5){
			for (int i = 0; i < 5; i++)
			{
				list.add(list1.get(i));
			}
		}else{
			list = list1;
		}
		ResponseUtils.renderJson(response, list);
	}
	
	/**
	 * 进入审计专项模型主界面
	 * @param params
	 * @param response
	 * @return
	 */
	@RequestMapping("sjzx")
	public String  showsjzxlayer(@RequestParam Map<String, Object> params, Model model)
	{
		model.addAttribute("treeList", auditTypeService.findAllAuditType());
		return "risk/sj";
	}
	
}
