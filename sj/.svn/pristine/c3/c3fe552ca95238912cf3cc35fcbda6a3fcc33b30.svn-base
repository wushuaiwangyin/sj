package com.krm.dbaudit.web.all360.mapManager;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import com.krm.dbaudit.web.all360.model.CustInfoModel;
import com.krm.dbaudit.web.all360.model.HistoryCustRed;
import com.krm.dbaudit.web.all360.model.TabColsDetailModel;
import com.krm.dbaudit.web.all360.util.FormatCollectObj;

@Repository("queryModelDao")
public class QueryModelDaoImpl implements QueryModelDao {
	@Autowired
	private JdbcTemplate sqlMapper; 
public JdbcTemplate getSqlMapper() {
		return sqlMapper;
	}

	public void setSqlMapper(JdbcTemplate sqlMapper) {
		this.sqlMapper = sqlMapper;
	}

	/*	private SqlMapper sqlMapper;

	public SqlMapper getSqlMapper() {
		return sqlMapper;
	}

	public void setSqlMapper(SqlMapper sqlMapper) {
		this.sqlMapper = sqlMapper;
	}
*/
	@Override
	public List<Map<String, Object>> getModels(Map<String, Object> params) {

		StringBuffer sb = new StringBuffer("select ");
		sb.append("t.PKID as tabId,t.PHY_TABLE as tableName,t.IS_PUBLIC as isPublic,c.PKID as columnId,c.ALISE_NAME as aliseName,c.NAME as columnName,c.DATA_TYPE as dataType,c.DICID as dicid,m.MODEL_ID as modelId,m.MODEL_NAME as modelName,m.MODEL_PATH as modelPath");
		sb.append(
				"  from SYS360_PHYTABLES_CONFIG  t,SYS360_COLUMNS_CONFIG c, SYS360_MODELS_COLS_CONTRAST MC,SYS360_MODELS_CONFIG M ")
				.append("WHERE  M.MODEL_ID=MC.MODEL_ID AND MC.COL_ID=C.PKID AND MC.TABL_ID=T.PKID  AND  T.PKID=C.TAB_ID  ");
		if (null != params.get("model_id")) {
			sb.append(" and M.model_id="
					+ Long.valueOf(params.get("model_id").toString()));
		}

		//return sqlMapper.selectList(sb.toString());
		return sqlMapper.queryForList(sb.toString());

	}

	@Override
	public List getColumns(Map<String, Object> params) {
		return null;
	}

	@Override
	public List<CustInfoModel> getCustInfos(Map<String, Object> params) {
		return null;
	}

	@Override
	public List<Map<String, Object>> getCustList(Map<String, Object> params,
			TabColsDetailModel tab) {
		String sql = tab.getSql();
		if (null != params.get("custId")) {
			sql += " and trim(CUSTOMID)='" + params.get("custId").toString().trim()+"'";
		}

		return sqlMapper.queryForList(sql);
	}

	@Override
	public List<Map<String, Object>> getLoanAccList(Map<String, Object> params,
			List<Map<String, Object>> conditions) {
		//String sql = FormatCollectObj.genConditons(conditions);
		String sql = FormatCollectObj.genEnConditons(conditions);
		if (null != params.get("acctno")) {
			sql += " and trim(acctno)='" + params.get("acctno").toString().trim()+"'";
		}
		if (null != params.get("custId")) {
			sql += " and trim(CUSTOMID)='" + params.get("custId").toString().trim()+"'";
		}

		return sqlMapper.queryForList(sql);
	}

	@Override
	public Map<String,Object> getDspSumData(Map<String, Object> params) {
		String sql ="";
		if("dps".equals(params.get("sum"))){
			sql= "select sum(balance) as balance  from test_dpsaccountinfo where trim(CUSTOMID)='"+params.get("custId").toString()+"'";
		}
		if("loan".equals(params.get("sum"))){
			sql= "select sum(balance) as balance  from  TEST_LNSACCTINFO where trim(CUSTOMID)='"+params.get("custId").toString()+"'";
		}

	//	return sqlMapper.selectOne(sql);
		return sqlMapper.queryForMap(sql);
	}

	@Override
	public List<Map<String, Object>> getDpsAccountList(
			Map<String, Object> params) {
		String sql="SELECT  ACCTNO,sum(BALANCE) as BALANCE ,substr(LASTPRTDATE,5,2) as mmonth  FROM test_dpsaccountinfo  WHERE trim(CUSTOMID)='"+params.get("custId").toString().trim()+"'  and substr(LASTPRTDATE,7,2)='01'  GROUP BY ACCTNO,substr(LASTPRTDATE,5,2)";
		//return sqlMapper.selectList(sql, params.get("custId").toString());
		
		return sqlMapper.queryForList(sql);
	}

	@Override
	public List getHistoryCustReds(Map<String, Object> params) {
		String sql="";
		String customTableName="";
		if("0".equals(params.get("isPublic").toString())){//对私
			customTableName="CISCUSTOMERINFO";
		}else {//对公
			customTableName="CISCUSTOMERINFO";
		}
		
		sql="select distinct( h.CUSTOMID )as custId,c.CUSTOMNAME as custName,max(h.HS_DATE) as hsDate FROM SYS360_HS_CUST h,CISCUSTOMERINFO c  where trim(c.CUSTOMID)=trim(h.CUSTOMID) and rownum<"+Integer.valueOf(params.get("row").toString())+" group by h.CUSTOMID,c.CUSTOMNAME";
		return sqlMapper.queryForList(sql);
	}

	@Override
	public void saveHisCustReds(HistoryCustRed hsd) {
		String sql="";
		String customTableName="";
		customTableName=getTableName(hsd.getIsPublic());
		 sql=" insert into SYS360_HS_CUST (pkid,customid,custname,hs_date) SELECT SYS360_HS_CUST_SEQ.nextval,CUSTOMID,CUSTOMNAME,'"+hsd.getHsDate()+"' FROM CISCUSTOMERINFO where trim(customid)='"+hsd.getCustId()+"'";
    sqlMapper.execute(sql);		
	}
private String getTableName(String isPublic){
	String customTableName="";
	if("0".equals(isPublic)){//对私
		customTableName="CISCUSTOMERINFO";
	}else {//对公
		customTableName="CISCUSTOMERINFO";
	}
	return customTableName;
}

@Override
public List<Map<String, Object>> getCustRels(Map<String, Object> params,List<Map<String, Object>> conditions) {
	//String sql="select cus_id_rel as custId ,cus_name_rel as relName,invt_typ as idType, inst_code as idNo from TEST_CUS_COM_REL_APITAL where cus_id='"+params.get("custId").toString().trim()+"'";
//	List<Map<String, Object>> list=sqlMapper.queryForList(sql);
//	CustRelCustModel cus=null;
	/*List<CustRelCustModel> clist=new ArrayList<CustRelCustModel>();
	if(list.size()>0){
		for(Map<String, Object> map2:list){
			CustRelCustModel cus =new CustRelCustModel();
			cus.setCustId(map2.get("custId".toUpperCase()).toString());
			cus.setIdNo(map2.get("idNo".toUpperCase()).toString());
			cus.setIdType(map2.get("idType".toUpperCase()).toString());
			cus.setRelName(map2.get("relName".toUpperCase()).toString());
			clist.add(cus);
		}
	}*/
	String sql = FormatCollectObj.genEnConditons(conditions);
	if (null != params.get("custId")) {
		sql += " and trim(cus_id)='" + params.get("custId").toString().trim()+"'";
	}

	return sqlMapper.queryForList(sql);
}

@Override
public List<Map<String, Object>> getCustSureList(Map<String, Object> params,
		List<Map<String, Object>> conditions) {
	String sql = FormatCollectObj.genEnConditons(conditions);
	if (null != params.get("custId")) {
		sql += " and trim(cus_id)='" + params.get("custId").toString().trim()+"'";
	}
	return sqlMapper.queryForList(sql);
}

@Override
public List<Map<String, Object>> getCommonCustInfos(Map<String, Object> params,
		TabColsDetailModel tab) {
	//只含英文列名的查询语句
	String sql=tab.getSql();
	if(null!=params.get("custId")){
		sql += " and trim(CUSTOMID)='" + params.get("custId").toString().trim()+"'";
	}
	
	//返回的数据集合
	List<Map<String, Object>> list=sqlMapper.queryForList(sql);
	
	return list;
}

@Override
public List<Map<String, Object>> getCustList(Map<String, Object> params,
		List<Map<String, Object>> conditions) {
	
	String sql = FormatCollectObj.genConditons(conditions);
	if (null != params.get("custId")) {
		sql += " and trim(CUSTOMID)='" + params.get("custId").toString().trim()+"'";
	}

	return sqlMapper.queryForList(sql);
}

@Override
public List<Map<String, Object>> getQueryModelList(Map<String, Object> params) {
String sql="select model_id as modelId,model_name as modelName from SYS360_MODELS_CONFIG where 1=1 ";
if(null!=params.get("modelId")){
	sql+=" and  model_id ="+Long.valueOf(params.get("modelId").toString());
}
	return sqlMapper.queryForList(sql);
}

@Override
public List<Map<String, Object>> getSumDataEveryAccunt(
		Map<String, Object> params) {
	String sql ="";
	if("dps".equals(params.get("sum"))){
	//	sql= "select ACCTNO,sum(balance) as balance  from test_dpsaccountinfo where trim(CUSTOMID)='"+params.get("custId").toString()+"'  group by ACCTNO";
		sql="select ACCTNO,balance from ("
+" select  ACCTNO ,sum(balance) as balance,dense_rank() over(order by sum(nvl(balance, 0)) desc) as rn "
+"  from test_dpsaccountinfo  where trim(CUSTOMID)='"+params.get("custId").toString().trim()+"' group by ACCTNO "
+"  ) where rn <4";
	}
	if("loan".equals(params.get("sum"))){ //TEST_LNSACCTINFO
		sql="select ACCTNO,balance from ("
				+" select  ACCTNO ,sum(balance) as balance,dense_rank() over(order by sum(nvl(balance, 0)) desc) as rn "
				+"  from TEST_LNSACCTINFO  where trim(CUSTOMID)='"+params.get("custId").toString().trim()+"' group by ACCTNO "
				+"  ) where rn <4";
	}

	return sqlMapper.queryForList(sql);
}
}
