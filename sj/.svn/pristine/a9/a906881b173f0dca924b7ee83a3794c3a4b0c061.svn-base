package com.krm.dbaudit.web.risk.controller;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.github.pagehelper.PageInfo;
import com.google.common.collect.Maps;
import com.krm.dbaudit.common.excel.ExcelUtils;
import com.krm.dbaudit.common.excel.template.utils.PoiUtil;
import com.krm.dbaudit.common.utils.DateUtils;
import com.krm.dbaudit.common.utils.FileUtils;
import com.krm.dbaudit.web.model.model.ModelBase;
import com.krm.dbaudit.web.model.service.ModelBaseService;
import com.krm.dbaudit.web.risk.model.DataDealModel;
import com.krm.dbaudit.web.risk.model.DataNoticeModel;
import com.krm.dbaudit.web.risk.model.ModelData;
import com.krm.dbaudit.web.risk.service.DataDealService;
import com.krm.dbaudit.web.risk.service.DataNoticeService;
import com.krm.dbaudit.web.risk.service.RiskDetectionService;
import com.krm.dbaudit.web.sys.model.SysOffice;
import com.krm.dbaudit.web.sys.model.SysUser;
import com.krm.dbaudit.web.sys.service.SysOfficeService;
import com.krm.dbaudit.web.util.DateUtil;
import com.krm.dbaudit.web.util.ResponseUtils;
import com.krm.dbaudit.web.util.SysUserUtils;

/**
 * 模型数据处理
 * @author Parker
 *
 */
@Controller
@RequestMapping("data")
public class DataController
{
	@Resource
	private DataNoticeService dataNoticeService;
	
	@Resource
	private DataDealService dataDealService;
	
	@Resource
	private RiskDetectionService riskDetectionService;
	
	@Resource
	private ModelBaseService modelBaseService;
	
	@Resource
	private SysOfficeService sysOfficeService;
	/**
	 * 下发通知，获取数据id并跳转
	 * @param params
	 * @param model
	 * @return
	 */
	@RequestMapping(value="deal", method=RequestMethod.POST)
	public String deal(@RequestParam Map<String, Object> params,  Model model){
		String dataId = (String) params.get("dataId");
		String modelId = (String) params.get("modelId");
		String noticeTime = DateUtils.getDate("yyyy-MM-dd HH:mm:ss");
		
		ModelBase  modelBase = modelBaseService.findById(Long.parseLong(modelId));
		ModelData md =  riskDetectionService.findModelDataByPkid(Integer.parseInt(dataId));
		//获取交易机构
		SysUser user = SysUserUtils.getSessionLoginUser();
		SysOffice organ = sysOfficeService.selectByPrimaryKey(Long.parseLong(md.getOrganId()));
		SysOffice currentOrgan = sysOfficeService.selectByPrimaryKey(user.getOfficeId());
		SysOffice superOrgan = sysOfficeService.selectByPrimaryKey(organ.getParentId());
		SysOffice superOrgan2 = sysOfficeService.selectByPrimaryKey(superOrgan.getParentId());
		SysOffice superOrgan3 = sysOfficeService.selectByPrimaryKey(superOrgan2.getParentId());
		List<SysOffice> borganl = new ArrayList<SysOffice>();
		if("33001".equals(currentOrgan.getOrgLevel())){
			borganl.add(superOrgan2);
			borganl.add(superOrgan3);
		}else{
			borganl.add(superOrgan2);
		}
		model.addAttribute("borganl",borganl);
		model.addAttribute("modelBase",modelBase);
		model.addAttribute("dataId", dataId );
		model.addAttribute("modelId", modelId );
		model.addAttribute("noticeTime", noticeTime);
		return "risk/deal";
	}
	
	/**
	 * 下发通知，获取数据id并跳转
	 * @param params
	 * @param model
	 * @return
	 */
	@RequestMapping(value="prenotice", method=RequestMethod.POST)
	public String prenotice(@RequestParam Map<String, Object> params,  Model model){
		String id = (String) params.get("id");
		DataNoticeModel  notice = dataNoticeService.findByPkId(Integer.parseInt(id));
		ModelData md =  riskDetectionService.findModelDataByPkid(notice.getDataId());
		ModelBase  modelBase = modelBaseService.findById(Long.parseLong(md.getModelId().toString()));
		//获取交易机构
		SysUser user = SysUserUtils.getSessionLoginUser();
		SysOffice organ = sysOfficeService.selectByPrimaryKey(Long.parseLong(md.getOrganId()));
		SysOffice currentOrgan = sysOfficeService.selectByPrimaryKey(user.getOfficeId());
		SysOffice superOrgan = sysOfficeService.selectByPrimaryKey(organ.getParentId());
		SysOffice superOrgan2 = sysOfficeService.selectByPrimaryKey(superOrgan.getParentId());
		SysOffice superOrgan3 = sysOfficeService.selectByPrimaryKey(superOrgan2.getParentId());
		List<SysOffice> borganl = new ArrayList<SysOffice>();
		if("33001".equals(currentOrgan.getOrgLevel())){
			borganl.add(superOrgan2);
			borganl.add(superOrgan3);
		}else{
			borganl.add(superOrgan2);
		}
		model.addAttribute("borganl",borganl);
		model.addAttribute("modelBase",modelBase);
		model.addAttribute("dataId", md.getId());
		model.addAttribute("modelId", md.getModelId());
		model.addAttribute("noticeTime", DateUtils.getDate("yyyy-MM-dd HH:mm:ss"));
		return "risk/deal";
	}
	
	
	
	
	/**
	 * 显示接收的通知书，通过状态来判断是否显示全部  1未处理，2已处理，否则显示全部
	 * @param params
	 * @param model
	 * @return
	 */
	@RequestMapping(value="noticereceive/show", method=RequestMethod.GET)
	public String shownoticereceive(@RequestParam Map<String, Object> params,  Model model){
		String status = (String) params.get("status");
		model.addAttribute("status", status);
		SysUser user = SysUserUtils.getSessionLoginUser();
		SysOffice currentOrgan = sysOfficeService.selectByPrimaryKey(user.getOfficeId());
		model.addAttribute("orgLevel", currentOrgan.getOrgLevel());
		return "risk/notice/index";
	}
	
	/**
	 * 显示接收的通知书，通过状态来判断是否显示全部  1未处理，2已处理，否则显示全部
	 * @param params
	 * @param model
	 * @return
	 */
	@RequestMapping(value="noticereceive/list", method=RequestMethod.POST)
	public void noticelist(@RequestParam Map<String, Object> params,  Model model,HttpServletResponse response){
		//获取当前用户
		SysUser user = SysUserUtils.getSessionLoginUser();
		String status = (String) params.get("status");
		model.addAttribute("status", status);
		PageInfo<DataNoticeModel> page = null;
		params.put("organId", user.getOfficeId());
		page = dataNoticeService.findNoticePageInfo(params);
		ResponseUtils.renderJson(response, page);
	}
	
	/**
	 * 非现场核实，获取数据id并跳转
	 * @param params
	 * @param model
	 * @return
	 */
	@RequestMapping(value="deal1", method=RequestMethod.POST)
	public String deal1(@RequestParam Map<String, Object> params,  Model model){
		String id = (String) params.get("id");
		if(null!=id && !"".equals(id)){
			//通过通知书处理
			DataNoticeModel  notice = dataNoticeService.findByPkId(Integer.parseInt(id));
			ModelBase  modelBase = modelBaseService.findById(Long.parseLong(notice.getModelId().toString()));
			model.addAttribute("dataId", notice.getDataId() );
			model.addAttribute("modelId",notice.getModelId());
			model.addAttribute("model", modelBase);
			model.addAttribute("bnoticeorganName", notice.getBnoticeorganName());
			model.addAttribute("trandate", notice.getTrandate());
			model.addAttribute("dataDate", notice.getTrandate() );
			model.addAttribute("noticeId", notice.getId());
			model.addAttribute("dealType", "2");	//非现场核实代号2
		}else{
			String dataId = (String) params.get("dataId");
			String modelId = (String) params.get("modelId");
			String organId = (String) params.get("organId");
			String dataDate = (String) params.get("dataDate");
			ModelBase  modelBase = modelBaseService.findById(Long.parseLong(modelId));
			ModelData md =  riskDetectionService.findModelDataByPkid(Integer.parseInt(dataId));
			SysOffice organ = sysOfficeService.selectByPrimaryKey(Long.parseLong(md.getOrganId()));
			model.addAttribute("dataId", dataId );
			model.addAttribute("modelId", modelId );
			model.addAttribute("model", modelBase);
			model.addAttribute("bnoticeorganName", organ.getName());
			model.addAttribute("trandate", md.getDataDate());
			model.addAttribute("dataDate", md.getDataDate());
			model.addAttribute("dealType", "2");	//非现场核实代号2
		}
		
		return "risk/deal1";
	}
	
	
	/**
	 * 现场核实，获取数据id并跳转
	 * @param params
	 * @param model
	 * @return
	 */
	@RequestMapping(value="deal2", method=RequestMethod.POST)
	public String deal2(@RequestParam Map<String, Object> params,  Model model){
		String id = (String) params.get("id");
		if(null!=id && !"".equals(id)){
			//通过通知书处理
			DataNoticeModel  notice = dataNoticeService.findByPkId(Integer.parseInt(id));
			ModelBase  modelBase = modelBaseService.findById(Long.parseLong(notice.getModelId().toString()));
			model.addAttribute("dataId", notice.getDataId() );
			model.addAttribute("modelId",notice.getModelId());
			model.addAttribute("model", modelBase);
			model.addAttribute("bnoticeorganName", notice.getBnoticeorganName());
			model.addAttribute("trandate", notice.getTrandate());
			model.addAttribute("dataDate", notice.getTrandate() );
			model.addAttribute("noticeId", notice.getId());
			model.addAttribute("dealType", "1");	//现场核实代号1
		}else{
			String dataId = (String) params.get("dataId");
			String modelId = (String) params.get("modelId");
			String organId = (String) params.get("organId");
			String dataDate = (String) params.get("dataDate");
			ModelBase  modelBase = modelBaseService.findById(Long.parseLong(modelId));
			ModelData md =  riskDetectionService.findModelDataByPkid(Integer.parseInt(dataId));
			SysOffice organ = sysOfficeService.selectByPrimaryKey(Long.parseLong(md.getOrganId()));
			model.addAttribute("dataId", dataId );
			model.addAttribute("modelId", modelId );
			model.addAttribute("organId", organId );
			model.addAttribute("model", modelBase);
			model.addAttribute("bnoticeorganName", organ.getName());
			model.addAttribute("trandate", md.getDataDate());
			model.addAttribute("dataDate", dataDate );
			model.addAttribute("dealType", "1");	//现场核实代号1
		}
		
		return "risk/deal1";
	}
	
	/**
	 * 下发通知
	* @param params
	 */
	@RequestMapping(value = "sendNotice",method=RequestMethod.POST)  
    public @ResponseBody Integer  sendNotice(@ModelAttribute DataNoticeModel notice, 
    		@RequestParam(value = "file", required = false) MultipartFile file, HttpServletRequest request, ModelMap model) {
	 	Map<String,Object> dataFile = new HashMap<String, Object>();
	 	Integer dataId = Integer.parseInt(notice.getDataId().toString());
		DataNoticeModel dataNoticeModel = dataNoticeService.findById(dataId);
		ModelData md =  riskDetectionService.findModelDataByPkid(dataId);
		InputStream is=null;
		//获取当前用户
		SysUser user = SysUserUtils.getSessionLoginUser();
			if(file != null){
		        try
				{
		        	String fileName = FileUtils.getFileNameNoSuffix(file.getOriginalFilename()); 
					is = file.getInputStream();
					byte[] data = new byte[(int) file.getSize()];  
					is.read(data);
					dataFile.put("dataId", dataId);
					dataFile.put("fileName", fileName);
					dataFile.put("fileContent", data);
					dataNoticeService.saveFile(dataFile);
				} catch (IOException e)
				{
					return -1;
				}
			}
				//notice.put("dataStatus", 2);
			SysOffice currentOrgan = sysOfficeService.selectByPrimaryKey(user.getOfficeId());
			SysOffice bOrgan = sysOfficeService.selectByPrimaryKey(Long.parseLong(md.getOrganId()));
			SysOffice organ2 = sysOfficeService.selectByPrimaryKey(Long.parseLong(notice.getNoticeorganId2()));
			notice.setDataStatus(2);
			notice.setNoticeStatus("1");
			notice.setNoticesender(user.getUsername());
			//通知机构
			notice.setNoticeorganId(user.getOfficeId().toString());
			notice.setNoticeorganName(currentOrgan.getName());

		        
		    //交易机构
		    notice.setBnoticeorganId(md.getOrganId().toString());
		    notice.setBnoticeorganName(bOrgan.getName());
		        
		    //交易日期
		    notice.setTrandate(md.getDataDate());
		    notice.setNoticeorganName2(organ2.getName());
		        
		    int count1 =  dataNoticeService.SendNotice(notice);
		        
		    if(count1 > 0){
		    	int count2 = dataNoticeService.updateStatus(dataId, 2);
		    	if(count2 > 0){
					return count1;
		    	}else{
					return -1; //下发失败，返回-1
		    	}
			}else {
				return -1; //下发失败，返回-1
			}
    }  
	
	/**
	 * 现场核实/非现场核实
	 * @param params
	 */
	@RequestMapping(value="dataDeal",method=RequestMethod.POST)
	public @ResponseBody Integer dataDeal(@RequestParam Map<String, Object> params, 
    		@RequestParam(value = "file", required = false) MultipartFile file, HttpServletRequest request, ModelMap model){
		Map<String,Object> dataFile = new HashMap<String, Object>();
	 	Integer dataId = Integer.parseInt(params.get("dataId").toString());
	 	DataDealModel dataDealModel = dataDealService.findById(dataId);
	 	SysUser user = SysUserUtils.getSessionLoginUser();
	 	//通知书主键
	 	String noticeId = (String) params.get("noticeId");
		InputStream is=null;
		if(dataDealModel == null){
			if(file != null){
				try
				{
					String fileName = FileUtils.getFileNameNoSuffix(file.getOriginalFilename()); 
					is = file.getInputStream();
					byte[] data = new byte[(int) file.getSize()];  
					is.read(data);
					dataFile.put("dataId", dataId);
					dataFile.put("fileName", fileName);
					dataFile.put("fileContent", data);
					dataNoticeService.saveFile(dataFile);	//下发和核实保存文件同一个方法
				} catch (IOException e)
				{
					return -1;
				}
			}
	        params.put("dataStatus", 2);
	        int count1 =  dataDealService.dataDeal(params);
	        if(count1 > 0){
	        	int count2 = dataDealService.updateStatus(dataId, 2);
	        	
	        	//更改通知书的状态
	        	if(null!=noticeId && !"".equals(noticeId)){
	        		Map<String,Object> p = new HashMap<String,Object>();
	        		p.put("notice_status", "2");
	        		p.put("id", Long.parseLong(noticeId));
	        		p.put("noticeendtime", DateUtil.getDate(new Date()));
	        		p.put("noticedealer", user.getName());
	        		
	        		int count3 = dataNoticeService.updateNoticeStatus(p);
	        	}
	        	
				if(count2 > 0){
					return count1;
				}
			}return -1; //核实失败，返回-1
		}else{
			return 0;	//已核实，返回0
		}
		
		
	}
	
	
	 
	
	
	/**
	 * 查询表头
	 * @param params
	 * @param model
	 * @param response
	 * @return
	 */
	@RequestMapping(value="queryHeaders",method = RequestMethod.POST)
	public String queryHeaders(@RequestParam  Map<String, Object> params, Model model,
			HttpServletResponse response){
		List<Map<String, Object>> headerList = dataNoticeService.queryHeaders(params);
		model.addAttribute("headerList",headerList)
			 .addAttribute("modelId", params.get("modelId"))
			 .addAttribute("organId", params.get("organId"))
			 .addAttribute("custNo", params.get("custNo"))
			 .addAttribute("dealStatus", params.get("dealStatus"));
		return "risk/detail";
	}
	
	/**
	 * 查询数据
	 * @param params
	 * @param response
	 * @throws Exception
	 */
	@RequestMapping(value="queryContents",method = RequestMethod.POST)
	public void queryContents(@RequestParam  Map<String, Object> params, 
			HttpServletResponse response) throws Exception{
		SysUser user = SysUserUtils.getSessionLoginUser();
		params.put("organId", user.getOfficeId());
		PageInfo<Map<String,Object>> page = dataNoticeService.findPageInfo(params);
		ResponseUtils.renderJson(response, page);
	}
	
	
	/**
	 * 查询详细数据左列
	 * @param params
	 * @param model
	 * @param response
	 * @return
	 */
	@RequestMapping(value="queryDetailsHeaders",method = RequestMethod.POST)
	public String queryDetailsHeaders(@RequestParam  Map<String, Object> params, Model model,
			HttpServletResponse response){
		Map<String, Object> newParams = new HashMap<String, Object>();
		Integer modelId = Integer.parseInt(params.get("modelid").toString());
		Integer dataId = Integer.parseInt(params.get("dataid").toString());
		newParams.put("modelId", modelId);
		List<Map<String, Object>> headerList = dataNoticeService.queryHeaders(newParams);
		model.addAttribute("headerList",headerList)
			 .addAttribute("modelId", modelId)
			 .addAttribute("dataId", dataId);
		return "risk/detail2";
	}
	
	/**
	 * 查询详细数据右列
	 * @param params
	 * @param response
	 */
	@RequestMapping(value="queryDetailsContents",method = RequestMethod.POST)
	public void queryDetailsContents(@RequestParam  Map<String, Object> params,
			HttpServletResponse response){
		List<Map<String, Object>> dataList = dataNoticeService.queryContents(params);
		List<Map<String, Object>> list = new ArrayList<Map<String,Object>>();
		Map<String,Object> dataMap = dataList.get(0);
		Map<String,Object> map = null;
		for (Object key : dataMap.keySet())
		{
			map = new HashMap<String, Object>();
			map.put("key", key);	map.put("value", dataMap.get(key));
			list.add(map);
		}
		ResponseUtils.renderJson(response, list);
	}
	
	
	
	/**
	 * 导出execl 
	 * @throws Exception 
	 */
	@RequestMapping(value = "export",method = RequestMethod.POST)
	public void exportFile(@RequestParam Map<String, Object> params,HttpServletRequest request,
			HttpServletResponse response) throws Exception{
		String filePath = request.getSession().getServletContext().getRealPath("/")+"WEB-INF";
		Map<String, Object> map = null;
		String custNo = null;
		if(params.containsKey("custNo")){
			custNo = params.get("custNo").toString();
		}
		if(params.containsKey("id")){
			String array [] = params.get("id").toString().split(",");
			
			List<File> files = new ArrayList<File>();
			for (int i = 0; i < array.length; i++)
			{
				map = new HashMap<String, Object>();
				map.put("modelId", array[i]);
				if(custNo != null && custNo.length() != 0){
					map.put("custNo", custNo);
				}
				files.add(generateFile(map, request, response));
			}
			FileUtils.downLoadFiles(filePath+"\\模型数据文件.zip", files,  response);
		}else{
			this.downloadFile(params, response);
		}
		
	}
	
	/**
	 * 生成临时文件
	 * @param params
	 * @param response
	 * @return
	 * @throws UnsupportedEncodingException 
	 */
	public File generateFile(Map<String, Object> params,HttpServletRequest request, HttpServletResponse response) 
			throws Exception{
		String filePath = request.getSession().getServletContext().getRealPath("/")+"WEB-INF";
		String modelName = null;
		modelName = riskDetectionService.findById(Long.parseLong(params.get("modelId").toString())).getName();
		List<Map<String, Object>> headerList = dataNoticeService.queryHeaders(params);//表头
		List<Map<String, Object>> dataList = dataNoticeService.queryContents(params);//数据
		Map<String, Object> headerMap = new HashMap<String, Object>();
		Map<String, String> titleMap = Maps.newLinkedHashMap();
		
		if(headerList.size() != 1){
			if(dataList.size() != 0){
				titleMap.put("通知状态","noticeStatus");   titleMap.put("处理状态","dealStatus");
				titleMap.put("数据编号","dataId");     titleMap.put("模型编号","modelId");   
				titleMap.put("会计日期","dataDate");   titleMap.put("机构编号","organId");
				titleMap.put("客户号", "custNo");
				for (int i = 0; i < headerList.size(); i++)
				{
					headerMap = headerList.get(i);
					titleMap.put(headerMap.get("fields").toString(),headerMap.get("itemvalues").toString());
				}
			}else{
				headerList.removeAll(dataList);
				headerMap.put("温馨提示：无相关数据！", "");
				dataList.add(headerMap);
				titleMap.put("温馨提示：无相关数据！", "");
			}
		}else{
			titleMap.put("温馨提示：", "无相关数据！！！");
		}
		try {
			File file = new File(filePath+"\\"+modelName+".xls");
			FileOutputStream fos = new FileOutputStream(file);
			PoiUtil.writeMyExcel(dataList, fos, titleMap);
			fos.close();
			return file;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	/**
	 * 下载单个文件
	 * @param params
	 * @param response
	 */
	public void downloadFile(Map<String, Object> params,HttpServletResponse response){
		String modelName = null;
		modelName = riskDetectionService.findById(Long.parseLong(params.get("modelId").toString())).getName();
		List<Map<String, Object>> headerList = dataNoticeService.queryHeaders(params);//表头
		List<Map<String, Object>> dataList = dataNoticeService.queryContents(params);//数据
		Map<String, Object> headerMap = new HashMap<String, Object>();
		Map<String, String> titleMap = Maps.newLinkedHashMap();
		
		if(headerList.size() != 1){
			if(dataList.size() != 0){
				titleMap.put("通知状态","noticeStatus");   titleMap.put("处理状态","dealStatus");
				titleMap.put("数据编号","dataId");     titleMap.put("模型编号","modelId");   
				titleMap.put("会计日期","dataDate");   titleMap.put("机构编号","organId");
				titleMap.put("客户号", "custNo");
				for (int i = 0; i < headerList.size(); i++)
				{
					headerMap = headerList.get(i);
					titleMap.put(headerMap.get("fields").toString(),headerMap.get("itemvalues").toString());
				}
			}else{
				headerList.removeAll(dataList);
				headerMap.put("温馨提示：无相关数据！", "");
				dataList.add(headerMap);
				titleMap.put("温馨提示：无相关数据！", "");
			}
		}else{
			titleMap.put("温馨提示：", "无相关数据！！！");
		}
		try {
			//流的方式直接下载
			ExcelUtils.exportMyExcel(response, modelName+".xls", dataList, titleMap);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
